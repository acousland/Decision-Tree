#########################################################
# Decision Tree Implementation
#
# Grow a decision tree and use those results
# to identify fault conditions
#
# - Aaron Cousland 13/05/2015
########################################################
require (RODBC)   # SQL connectivity
require (rpart)   # Decision free functions
# Close any existing connections
odbcCloseAll()
# Create a connection to the database called
local.connection <- odbcConnect("RTV", believeNRows=FALSE)
# Query the database and put the results into the data frame logging.results
logger.results.training <- sqlQuery(local.connection,
"SELECT * FROM ELSPEC.RMS_TRAINING where ts between '17/MAR/15 09:00:00 AM' and '17/MAR/15 11:00:00 PM';")
# Set up relational formula
tree.formula <- "logger.results.training$FAULT ~ (logger.results.training$RMSI1 + logger.results.training$RMSI3 + logger.results.training$RMSVN)"
# Grow tree
tree.model <- rpart(tree.formula, data=logger.results.training, method="anova")
# prune tree to stop over fit
tree.model$cptable[which.min(tree.model$cptable[,"xerror"]),"CP"]
plot(tree.model)
sum(logger.results.training$FAULT==TRUE)
for (i in seq(1,11,by=0.5))
{
exp(i)
}
for (i in seq(1,11,by=0.5))
{
print(exp(i))
}
plotcp(tree.model)
jpeg(tree.model)
plot(tree.model)
tree.model
tree.model$y
tree.model$frame
tree.model$where
tree.model$call
tree.model$terms
plot(tree.model)
prp
install.packages("rpart.plot")
require (rpart.plot)  # Plotting decision trees
prp()
prp(tree.model)
prp(tree.model, type=1)
prp(tree.model, type=2)
prp(tree.model, type=3)
prp(tree.model, type=4)
prp(tree.model, type=5)
prp(tree.model, type=1)
prp(tree.model, type=1, tweak=0.3)
prp(tree.model, type=1, tweak=1)
prp(tree.model, type=1, tweak=1, compress=FALSE)
prp(tree.model, type=4, tweak=1, compress=FALSE)
prp(tree.model, type=4, tweak=1, space=2)
prp(tree.model, type=4, tweak=1, space=3)
prp(tree.model, type=4, tweak=1, space=5)
prp(tree.model, type=4, tweak=1, space=4)
prp(tree.model, type=4, tweak=1, space=4, Margin=2)
prp(tree.model, type=4, tweak=1, space=4, Margin=1)
prp(tree.model, type=4, tweak=1, space=4, Margin=0)
prp(tree.model, type=4, tweak=1, space=4, cp=2)
prp(tree.model, type=4, tweak=1, space=4, cp=.2)
prp(tree.model, type=4, tweak=1, space=4, extra=7)
prp(tree.model, type=4, tweak=1, space=4, extra=4)
prp(tree.model, type=4, tweak=1, space=4, extra=10)
prp(tree.model, extra=1)
prp(tree.model, extra=2)
prp(tree.model, extra=3)
prp(tree.model, extra=4)
prp(tree.model, extra=5)
prp(tree.model, extra=6)
prp(tree.model, extra=106)
prp(tree.model, extra=1)
prp(tree.model)
prp(tree.model, under=TRUE)
prp(tree.model, under=TRUE, extra=1)
plot.rpart(tree.model)
# Set up relational formula
tree.formula <- "logger.results.training$FAULT ~ (logger.results.training$RMSI1 + logger.results.training$RMSI3 + logger.results.training$RMSVN)"
# Grow tree
tree.model <- rpart(tree.formula, data=logger.results.training, method="anova")
# prune tree to stop over fit
#tree.model$cptable[which.min(tree.model$cptable[,"xerror"]),"CP"]
prp(tree.model, under=TRUE, extra=1)
tree.model <- rpart(tree.formula, data=logger.results.training, method="anova")
prp(tree.model, under=TRUE, extra=1)
# Set up relational formula
tree.formula <- "logger.results.training$FAULT ~ (logger.results.training$RMSVN)"
# Grow tree
tree.model <- rpart(tree.formula, data=logger.results.training, method="anova")
# prune tree to stop over fit
#tree.model$cptable[which.min(tree.model$cptable[,"xerror"]),"CP"]
prp(tree.model, under=TRUE, extra=1)
# Set up relational formula
tree.formula <- "logger.results.training$FAULT ~ logger.results.training$RMSVN"
# Grow tree
tree.model <- rpart(tree.formula, data=logger.results.training, method="anova")
# prune tree to stop over fit
#tree.model$cptable[which.min(tree.model$cptable[,"xerror"]),"CP"]
prp(tree.model, under=TRUE, extra=1)
# Set up relational formula
tree.formula <- "logger.results.training$FAULT ~ (logger.results.training$RMSI1 + logger.results.training$RMSI3 + logger.results.training$RMSVN)"
# Grow tree
tree.model <- rpart(tree.formula, data=logger.results.training, method="anova")
# prune tree to stop over fit
#tree.model$cptable[which.min(tree.model$cptable[,"xerror"]),"CP"]
prp(tree.model, under=TRUE, extra=1)
#########################################################
# Decision Tree Implementation (Recursive Partitioning)
#
# Grow a decision tree and use those results
# to identify fault conditions
#
# - Aaron Cousland 13/05/2015
########################################################
require (RODBC)       # SQL connectivity
require (rpart)       # Decision free functions
require (rpart.plot)  # Plotting decision trees
# Close any existing connections
odbcCloseAll()
# Create a connection to the database called
local.connection <- odbcConnect("RTV", believeNRows=FALSE)
# Query the database and put the results into the data frame logging.results
logger.results.training <- sqlQuery(local.connection,
"SELECT * FROM ELSPEC.RMS_TRAINING where ts between '17/MAR/15 09:00:00 AM' and '17/MAR/15 10:00:00 AM';")
# Set up relational formula
tree.formula <- "logger.results.training$FAULT ~ (logger.results.training$RMSI1 + logger.results.training$RMSI3 + logger.results.training$RMSVN)"
# Grow tree
tree.model <- rpart(tree.formula, data=logger.results.training, method="anova")
# prune tree to stop over fit; not really required here
tree.model$cptable[which.min(tree.model$cptable[,"xerror"]),"CP"]
# Display tree
prp(tree.model, under=TRUE, extra=1)
?rpart
text(tree.model)
plot(tree.model)
text(tree.model)
#########################################################
# Decision Tree Implementation (Recursive Partitioning)
#
# Grow a decision tree and use those results
# to identify fault conditions
#
# - Aaron Cousland 13/05/2015
########################################################
require (RODBC)       # SQL connectivity
require (rpart)       # Decision free functions
require (rpart.plot)  # Plotting decision trees
# Close any existing connections
odbcCloseAll()
# Create a connection to the database called
local.connection <- odbcConnect("RTV", believeNRows=FALSE)
# Query the database and put the results into the data frame logging.results
logger.results.training <- sqlQuery(local.connection,
"SELECT * FROM ELSPEC.RMS_TRAINING where ts between '17/MAR/15 09:00:00 AM' and '17/MAR/15 10:00:00 PM';")
# Set up relational formula
tree.formula <- "logger.results.training$FAULT ~ (logger.results.training$RMSI1 + logger.results.training$RMSI3 + logger.results.training$RMSVN)"
# Grow tree
tree.model <- rpart(tree.formula, data=logger.results.training, method="anova")
# prune tree to stop over fit; not really required here
tree.model$cptable[which.min(tree.model$cptable[,"xerror"]),"CP"]
plot(tree.model)
text(tree.model)
fancyRpartPlot()
install.packages('RColorBrewer')
library(RColorBrewer)
fancyRpartPlot(tree.model)
library(rattle).
library(rattle)
fancyRpartPlot(tree.model)
detach("package:RColorBrewer", unload=TRUE)
fancyRpartPlot(tree.model)
fancyRpartPlot(tree.model)
library(RColorBrewer)
fancyRpartPlot(tree.model)
#########################################################
# Decision Tree Implementation (Recursive Partitioning)
#
# Grow a decision tree and use those results
# to identify fault conditions
#
# - Aaron Cousland 13/05/2015
########################################################
require (RODBC)       # SQL connectivity
require (rpart)       # Decision free functions
require (rpart.plot)  # Plotting decision trees
require (rattle)      # More plotting tools
# Close any existing connections
odbcCloseAll()
# Create a connection to the database called
local.connection <- odbcConnect("RTV", believeNRows=FALSE)
# Query the database and put the results into the data frame logging.results
logger.results.training <- sqlQuery(local.connection,
"SELECT * FROM ELSPEC.RMS_TRAINING where ts between '17/MAR/15 09:00:00 AM' and '17/MAR/15 10:00:00 AM';")
# Set up relational formula
tree.formula <- "logger.results.training$FAULT ~ (logger.results.training$RMSI1 + logger.results.training$RMSI3 + logger.results.training$RMSVN)"
# Grow tree
tree.model <- rpart(tree.formula, data=logger.results.training, method="anova")
# prune tree to stop over fit
#tree.model$cptable[which.min(tree.model$cptable[,"xerror"]),"CP"]
fancyRpartPlot(tree.model)
1000*.2
200/60
#########################################################
# Decision Tree Implementation (Recursive Partitioning)
#
# Grow a decision tree and use those results
# to identify fault conditions
#
# - Aaron Cousland 13/05/2015
########################################################
require (RODBC)       # SQL connectivity
require (rpart)       # Decision free functions
require (rpart.plot)  # Plotting decision trees
require (rattle)      # More plotting tools
# Close any existing connections
odbcCloseAll()
# Create a connection to the database called
local.connection <- odbcConnect("RTV", believeNRows=FALSE)
# Query the database and put the results into the data frame logging.results
logger.results.training <- sqlQuery(local.connection,
"SELECT * FROM ELSPEC.RMS_TRAINING where ts between '17/MAR/15 09:00:00 AM' and '17/MAR/15 10:00:00 PM';")
# Set up relational formula
tree.formula <- "logger.results.training$FAULT ~ (logger.results.training$RMSI1 + logger.results.training$RMSI3 + logger.results.training$RMSVN)"
# Grow tree
tree.model <- rpart(tree.formula, data=logger.results.training, method="anova")
# prune tree to stop over fit
#tree.model$cptable[which.min(tree.model$cptable[,"xerror"]),"CP"]
fancyRpartPlot(tree.model)
# Close any existing connections
odbcCloseAll()
# Create a connection to the database called
local.connection <- odbcConnect("RTV", believeNRows=FALSE)
# Query the database and put the results into the data frame logging.results
logger.results <- sqlQuery(local.connection,
"SELECT * FROM ELSPEC.RMS_TRAINING where ts between '17/MAR/15 09:00:00 AM' and '17/MAR/15 10:00:00 PM';")
# Create Training Dataset
StartTime <- force_tz(as.POSIXct("2015-03-17 09:00:00", format = "%Y-%m-%d %H:%M:%OS"),"AEST")
EndTime <- force_tz(as.POSIXct("2015-03-17 10:00:00", format = "%Y-%m-%d %H:%M:%OS"),"AEST")
logger.results.training <- subset(logger.results, logger.results$TS >= StartTime & logger.results$TS <= EndTime)
# Set up relational formula
tree.formula <- "logger.results.training$FAULT ~ (logger.results.training$RMSI1 + logger.results.training$RMSI3 + logger.results.training$RMSVN)"
# Grow tree
tree.model <- rpart(tree.formula, data=logger.results.training, method="anova")
# prune tree to stop over fit
#tree.model$cptable[which.min(tree.model$cptable[,"xerror"]),"CP"]
fancyRpartPlot(tree.model)
tree.model$cptable[which.min(tree.model$cptable[,"xerror"]),"CP"]
fancyRpartPlot(tree.model)
if(logger.results$RMSI1<0.16){
logger.results$PrFault <- 0
} elseif (logger.results>=0.16){
logger.results$PrFault <- 1
}
# Apply decision tree results
if(logger.results$RMSI1<0.16)
{
logger.results$PrFault = 0
} elseif (logger.results>=0.16){
logger.results$PrFault = 1
}
logger.results$PrFault <- 0
if(logger.results$RMSI1<0.16)
{
logger.results$PrFault <- 0
} elseif (logger.results>=0.16){
logger.results$PrFault = 1
}
logger.results$PrFault <- 0
if(logger.results$RMSI1<0.16)
{logger.results$PrFault <- 0}
elseif (logger.results>=0.16)
{logger.results$PrFault <- 1}
logger.results$PrFault <- 0
if(logger.results$RMSI1<0.16) {
logger.results$PrFault <- 0
}else if (logger.results>=0.16)
{logger.results$PrFault <- 1}
logger.results$PrFault <- ifelse(logger.results$RMSI1<0.16,0,1)
performance <- logger.results %>%
group_by(FAULT) %>%
summarise (Score = sum(PrFault))
performance <- logger.results %>%
group_by(FAULT) %>%
summarise (Score = sum(PrFault))
require (dplyr)       # Required for performance measurement
performance <- logger.results %>%
group_by(FAULT) %>%
summarise (Score = sum(PrFault))
performance
performance$Score
print(paste("Score =",performance$Score[2]-performance$Score[1],"/",sum(logger.results$FAULT==TRUE)))
logger.results$PrFault <- ifelse(logger.results$RMSI1<=0.16,0,1)
performance <- logger.results %>%
group_by(FAULT) %>%
summarise (Score = sum(PrFault))
performance$Score
print(paste("Score =",performance$Score[2]-performance$Score[1],"/",sum(logger.results$FAULT==TRUE)))
# Apply decision tree results
logger.results$PrFault <- ifelse(logger.results$RMSI1<0.16,0,1)
performance <- logger.results %>%
group_by(FAULT) %>%
summarise (Score = sum(PrFault))
performance$Score
print(paste("Score =",performance$Score[2]-performance$Score[1],"/",sum(logger.results$FAULT==TRUE)))
logger.results$PrFault <- ifelse(logger.results$RMSI1<0.16,0,1)
sysstart <- System.time()
sysstart <- proc.time()
sysstart <- proc.time()
# Apply decision tree results
logger.results$PrFault <- ifelse(logger.results$RMSI1<0.16,0,1)
proc.time() - sysstart
